==========================
PyGreSQL future directions
==========================


To Do
-----

- Add check that we have at least Py 2.3 and Pg 7.4,
  remove or rewrite cruft with old smell (has_key, type() etc.)
- Support PQescapeStringConn and PQescapeByteaConn
  (see also http://www.postgresql.org/docs/techdocs.49).
- Use PQescapeStringConn in the _quote() function of pg and pgdb
  (escaping via backslash is not standard and produces warnings
  in newer PostgreSQL versions).
- Code marked with XXX in the pg module
- pg relies on OIDs, but these are not generated by default any more
  (at least docs should recommend setting default_with_oids=true).
- install.txt talks about MSVC 2003, we should try using 2005/2008
- 64 bit int typecasting in pgdb module
  (see http://mailman.vex.net/pipermail/pygresql/2008-March/001943.html).
- Support composite primary keys
  (see http://mailman.vex.net/pipermail/pygresql/2006-May/001688.html).
- Documentation for the pgdb module (everything specific to PyGreSQL).
- The large object and direct access functions need much more attention.
- An update query should return the number of rows affected.
- The C module needs to be cleaned up and redundant code merged,
  and should get its own unit test module.
- The fetch method should use real cursors.
- What shall wie do with the "tutorial" directory?
  - it's rather a tutorial for Postgres/SQL than for PyGreSQL
  - it' using only the query method from the classic pg module,
    no other PyGreSQL functionality
  - it's rather a demo than a tutorial


Proposed Patches
----------------

- Notice handling
  (http://mailman.vex.net/pipermail/pygresql/2005-November/001530.html)
- Dict cursors
  (http://mailman.vex.net/pipermail/pygresql/2006-September/001766.html)


Wish List
---------

- Support for the new insert/update ... returning ... feature
  (see http://jakub.fedyczak.net/post/10/).
- Make SQLSTATE error codes available.
- Make use of PQexecParams() and PQprepare(). This could speed up
  executemany() and allow retrieving binary data directly by setting
  the resultFormat parameter to one.
- Users should be able to register their own types with _pg.
- I would like a new method that returns a dictionary
  of dictionaries from a SELECT.
- Add support for persistent and pooled connections
  that can be used in multi-threaded environments (we could simply
  (add http://www.webwareforpython.org/DBUtils to the distribution).
- Make PyGreSQL thread-safe on the connection level.
- The API documentation could be created with Epydoc.
- Write a tutorial for beginners and advanced use.
- More and better documented examples.
